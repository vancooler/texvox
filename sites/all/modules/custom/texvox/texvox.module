<?php
if (defined('DEBUG')) {    
}
else {
    define('DEBUG', true);
}

/**
 * implementation of hook_rules_condition_info()
 */
function texvox_rules_condition_info() {
  $items['texvox_condition_duplicate_screen_code'] = array(
    'label' => t('TexVox warning for duplicate screen code in IVR'), 
    'parameter' => array(
      'node' => array(
        'type' => 'node',
        'label' => t('Node'),
      ),        
    ), 
    'group' => t('TexVox warning'),
    'callbacks' => array(
      'execute' => 'texvox_condition_duplicate_screen_code',
    ),
    'base' => 'texvox_condition_duplicate_screen_code',
  );
  return $items;
}

/**
 * Condition packages_condition_packagetype
 */
function texvox_condition_duplicate_screen_code($node) {
  $nid = $node->nid;
  $valid = false;
  if($node->type == "ivr"){
    $query = db_select('node', 'n');
    $query->join('field_data_field_ivr_screen', 's', 'n.nid = s.field_ivr_screen_target_id');
    $result = $query->fields('n', array('title'))
               ->condition('s.entity_id', $nid, '=')
               ->orderBy("n.title", "ASC")
               ->execute();
    // dpm($result);
    $screen_array = array();
    foreach ($result as $row) {
      $screen_array[] = $row->title;
    }
    if(!empty($screen_array) and count(array_unique($screen_array)) < count($screen_array))
    {
        $valid = true;
    }
  }
  return $valid;
} 

// alter the inline entity form fields
function texvox_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Make sure there's a stock field on each of the allowed product types.
    $is_menu = FALSE;
    $is_screen = FALSE;
    $is_variant = FALSE;
    foreach ($context['allowed_bundles'] as $bundle) {
      if ($bundle=='screen_menu') {
        $is_menu = TRUE;
      }
      elseif ($bundle=='screen') {
        if($context['parent_bundle'] == 'ivr'){
          $is_screen = TRUE;
        }
        else if($context['parent_bundle'] == 'screen'){
          $is_variant = TRUE;
        }
      }
    }
    if ($is_menu) {
      // menus table customize
      unset($fields['title']);                       // This line removes the title field. you're looking to do this, just with the status instead of title field
      $fields['field_menu_key_new'] = array(                   // This part adds the key field with a label 'Key'
        'type' => 'field',
        'label' => t('Key'),
        'weight' => 1,
      );
      $fields['field_title_in_multi_languages'] = array(                     // Add title
        'type' => 'field',
        'label' => t('Display Title'),
        'weight' => 101,
        'formatter' => 'rss',
      );
      $fields['field_go_to_screen'] = array(                     // Add go to screen
        'type' => 'field',
        'label' => t('Go to Screen'),
        'weight' => 103,
      );
      $fields['field_action'] = array(                     // Add Action
        'type' => 'field',
        'label' => t('Action'),
        'weight' => 102,
      );
      unset($fields['status']);                         // Remove Status( it does not make sense)
      // dpm($fields);
    }
    elseif($is_screen){
      // screens table customize
      unset($fields['status']);                        // Remove Status( it does not make sense)
      $fields['field_screen_type'] = array(                // Add Screen Type   
        'type' => 'field',
        'label' => t('Type'),
        'weight' => 101,
      );
      $fields['nid'] = array(    // Add Screen Language               
        'type' => 'property',
        'label' => t('Create Variant'),
        'weight' => 102,
      );
      $fields['vid'] = array(    // Add Screen Language               
        'type' => 'property',
        'label' => t('Node ID'),
        'weight' => -102,
      ); 
      
      $fields['title']['label'] = "Screen Code";          // Change the title Label

    }

    elseif($is_variant){
      // screens table customize
      unset($fields['status']);                        // Remove Status( it does not make sense)
      $fields['field_screen_type'] = array(                // Add Screen Type   
        'type' => 'field',
        'label' => t('Type'),
        'weight' => 101,
      );      
      $fields['title']['label'] = "Screen Code";          // Change the title Label

    }
}


//////////////////////////////////////////////////////////////////////
//
// Form alter to customize the user interface of content managemeng
//
//////////////////////////////////////////////////////////////////////
function texvox_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form_id);
  // texvox_convert_menu_title_to_key();
  global $user;
  if($form_id == "user_profile_form"){
    unset($form['field_encrypted_freeswitch_pass']);
    if (!is_array($user->roles) || !in_array('administrator', $user->roles)) {  
      $form['field_domain']['und']['#prefix'] = "<div style='display:none'>" . $form['field_domain']['und']['#prefix'];
      $form['field_domain']['und']['#suffix'] = "</div>" . $form['field_domain']['und']['#suffix'];
      $form['field_default_country']['und']['#prefix'] = "<div style='display:none'>" . $form['field_default_country']['und']['#prefix'];
      $form['field_default_country']['und']['#suffix'] = "</div>" . $form['field_default_country']['und']['#suffix'];
      $form['field_default_city']['und']['#prefix'] = "<div style='display:none'>" . $form['field_default_city']['und']['#prefix'];
      $form['field_default_city']['und']['#suffix'] = "</div>" . $form['field_default_city']['und']['#suffix'];
    }
  }

  if($form_id == "user_register_form"){
    if (!is_array($user->roles) || !in_array('administrator', $user->roles)) {  
      $form['field_domain']['und']['#prefix'] = "<div style='display:none'>" . $form['field_domain']['und']['#prefix'];
      $form['field_domain']['und']['#suffix'] = "</div>" . $form['field_domain']['und']['#suffix'];
      $form['field_default_country']['und']['#prefix'] = "<div style='display:none'>" . $form['field_default_country']['und']['#prefix'];
      $form['field_default_country']['und']['#suffix'] = "</div>" . $form['field_default_country']['und']['#suffix'];
      $form['field_default_city']['und']['#prefix'] = "<div style='display:none'>" . $form['field_default_city']['und']['#prefix'];
      $form['field_default_city']['und']['#suffix'] = "</div>" . $form['field_default_city']['und']['#suffix'];
    }
  }

  if($form_id == "views_exposed_form"){
    // dpm($form);
    $form['type']['#options'] = array(
      'All' => '- Any -',
      'organization' => "Organization",
      'branch' => 'Branch',
      'ivr' =>'IVR'
      );
    
  }

  // organization
  if($form_id == "organization_node_form"){
    if(!is_array($user->roles) || !in_array('administrator', $user->roles)){
      $form['revision_information']['#access'] = FALSE;
      $form['options']['#access'] = FALSE;
      $form['author']['#access'] = FALSE;
    }
    $form['actions']['submit']['#submit'][] = 'texvox_organization_form_submit_redirect_handler';

  }

  // Alter IVR only for this branch's organization
  if($form_id == "branch_node_form"){
    
    // $tz_array = $form['field_timezone']['und']['#options'];
    // $new_tz_array = array('_none' => "- None -");
    // $timestamp = time();
    // foreach ($tz_array as $key => $value) {
    //   if($value != "- None -"){
    //     date_default_timezone_set($value);
    //     $new_tz_array['UTC' . date('P', $timestamp) . " " . $key] = 'UTC' . date('P', $timestamp) . " " . $value;

    //   }
    // }
    // asort($new_tz_array);
    // foreach ($new_tz_array as $key => $value) {
    //   print $key . '|' . $value."<br>";
    // }
    // $form['field_timezone']['und']['#options'] = $new_tz_array;
    // if(!is_array($user->roles) || !in_array('administrator', $user->roles)){
    //   $form['revision_information']['#access'] = FALSE;
    //   $form['options']['#access'] = FALSE;
    //   $form['author']['#access'] = FALSE;
    // }
    //     dpm($form);

    // $form['field_timezone']['und']['#element_validate'][0] = 'texvox_timezone_validate';
    // dpm($form);
    $nid = $form['nid']['#value'];
    $ivr_array = array("_none"=>"- Select a value -");
    if(isset($nid) and !empty($nid)){
      $query = db_select('field_data_field_only_for_organization', 'b');
      $query->join('field_data_field_organization', 'o', 'o.field_organization_target_id = b.field_only_for_organization_target_id');
      $query->join('node', 'n', 'n.nid = b.entity_id');
      $result = $query->fields('n', array('nid', 'title'))
                 ->condition('o.entity_id', $nid, '=')
                 ->orderBy("n.title", "ASC")
                 ->execute();
      // dpm($result);
      foreach ($result as $row) {
        $ivr_array[$row->nid] = $row->title;
      }
    }
    $timeslots = $form['field_timeslots']['und'];
    if(isset($timeslots) and !empty($timeslots)){
      foreach ($timeslots as $key => $timeslot) {
        if(is_numeric($key) and isset($timeslot['field_ivr']) and isset($timeslot['field_ivr']['und']) and isset($timeslot['field_ivr']['und']['#options'])){
          $form['field_timeslots']['und'][$key]['field_ivr']['und']['#options'] = $ivr_array;
        }
      }
    }
    $holiday = $form['field_holiday']['und'];
    if(isset($holiday) and !empty($holiday)){
      foreach ($holiday as $key => $holid) {
        if(is_numeric($key) and isset($holid['field_ivr']) and isset($holid['field_ivr']['und']) and isset($holid['field_ivr']['und']['#options'])){
          $form['field_holiday']['und'][$key]['field_ivr']['und']['#options'] = $ivr_array;
        }
      }
    }
    $form['field_default_ivr']['und']['#options'] = $ivr_array;
    $form['field_default_open_ivr']['und']['#options'] = $ivr_array;

    $close_ivr_id = 0;
    if(isset($form['field_default_ivr']['und']['#default_value'][0])){
      $close_ivr_id = intval($form['field_default_ivr']['und']['#default_value'][0]);
    }
    $bad_closed_screens = array();
    $query = db_select('field_data_field_ivr_screen', 's');
    $query->join('field_data_field_original_screen_id', 't', 't.entity_id = s.field_ivr_screen_target_id');
    $result = $query->fields('s', array('field_ivr_screen_target_id'))
                    ->condition('s.entity_id', $close_ivr_id, '=')
                    ->execute();
    foreach ($result as $row) {
      $bad_closed_screens[] = intval($row->field_ivr_screen_target_id);
    }

    $query = db_select('field_data_field_ivr_screen', 's');
    $query->join('field_data_title_field', 't', 't.entity_id = s.field_ivr_screen_target_id');
    $result = $query->fields('s', array('field_ivr_screen_target_id'))
                    ->fields('t', array('title_field_value'))
                    ->condition('s.entity_id', $close_ivr_id, '=')
                    ->execute();
    $close_screen_options = array('_none' => '- Select a value -');
    foreach ($result as $row) {
      if(empty($bad_closed_screens) or !in_array(intval($row->field_ivr_screen_target_id), $bad_closed_screens)){
        $close_screen_options[$row->field_ivr_screen_target_id] = ($row->title_field_value);
      }
    }


    $form['field_default_closed_screen']['und']['#options'] = $close_screen_options;


    $open_ivr_id = 0;
    if(isset($form['field_default_open_ivr']['und']['#default_value'][0])){
      $open_ivr_id = intval($form['field_default_open_ivr']['und']['#default_value'][0]);      
    }
    $bad_open_screens = array();
    $query = db_select('field_data_field_ivr_screen', 's');
    $query->join('field_data_field_original_screen_id', 't', 't.entity_id = s.field_ivr_screen_target_id');
    $result = $query->fields('s', array('field_ivr_screen_target_id'))
                    ->condition('s.entity_id', $open_ivr_id, '=')
                    ->execute();
    foreach ($result as $row) {
      $bad_open_screens[] = intval($row->field_ivr_screen_target_id);
    }
    $query = db_select('field_data_field_ivr_screen', 's');
    $query->join('field_data_title_field', 't', 't.entity_id = s.field_ivr_screen_target_id');
    $result = $query->fields('s', array('field_ivr_screen_target_id'))
                    ->fields('t', array('title_field_value'))
                    ->condition('s.entity_id', $open_ivr_id, '=')
                    ->execute();
    $open_screen_options = array('_none' => '- Select a value -');
    foreach ($result as $row) {
      if(empty($bad_open_screens) or !in_array(intval($row->field_ivr_screen_target_id), $bad_open_screens)){
        $open_screen_options[$row->field_ivr_screen_target_id] = ($row->title_field_value);
      }
    }
    $form['field_default_open_screen']['und']['#options'] = $open_screen_options;


    $form['actions']['submit']['#submit'][] = 'texvox_branch_form_submit_nested_handler';
  }

  if($form_id == "screen_node_form"){
    $form['field_original_screen_id']['#prefix'] = '<div style="display:none">';
    $form['field_original_screen_id']['#suffix'] = '</div>';
    if(isset($form['clone_from_original_nid']) and isset($form['clone_from_original_nid']['#value'])){
      $original_nid = intval($form['clone_from_original_nid']['#value']);
      $form_state['original_nid'] = $original_nid;
      $form['actions']['submit']['#submit'][] = 'texvox_screen_form_submit_link_to_ivr';
      $form['und'][0]['value']['#default_value'] = $form['clone_from_original_nid']['#value'];
      if(isset($form['field_variants']['und']['entities'])){
        foreach ($form['field_variants']['und']['entities'] as $key => $value) {
          if(is_numeric($key)){
            unset($form['field_variants']['und']['entities'][$key]);
          }
        }
      }
    }
    $form['actions']['submit']['#submit'][] = 'texvox_screen_form_submit_nested_handler';

    $screen_id = intval($form['clone_from_original_nid']['#value']);
    $query = db_select('field_data_field_ivr_screen', 's');
    $result = $query->fields('s', array('entity_id'))
                    ->condition('s.field_ivr_screen_target_id', $screen_id, '=')
                    ->execute();
    $ivr_id = 0;
    foreach ($result as $row) {
      $ivr_id = intval($row->entity_id);
    }
    // $ivr_id = intval($form['nid']['#value']);
    $screen_code = $form['title_field']['und'][0]['value']['#default_value'];
    $options = $form['field_used_for_branches']['und']['#options'];
    $query = db_select('field_data_field_ivr_screen', 's');
    $query->join('field_data_field_used_for_branches', 'b', 'b.entity_id = s.field_ivr_screen_target_id');
    $query->join('node', 'n', 'n.nid = s.field_ivr_screen_target_id');

    $result = $query->fields('b', array('field_used_for_branches_target_id'))
               ->condition('s.entity_id', intval($ivr_id), '=')
               ->condition('n.title', $screen_code, '=')
               ->execute();
    $bad_options = array();
    foreach ($result as $row) {
      $bad_options[] = intval($row->field_used_for_branches_target_id);
    }

    $query = db_select('field_data_field_only_for_organization', 'ofo');
    $query->join('field_data_field_organization', 'o', 'ofo.field_only_for_organization_target_id = o.field_organization_target_id');

    $result = $query->fields('o', array('entity_id'))
               ->condition('ofo.entity_id', intval($ivr_id), '=')
               ->execute();
    $good_options = array();
    foreach ($result as $row) {
      $good_options[] = intval($row->entity_id);
    }
    if(count($good_options) > 0){
      foreach ($options as $op => $option) {
        if(is_numeric($op) and !in_array(intval($op), $good_options)){
          unset($form['field_used_for_branches']['und']['#options'][$op]);
        }
      }
    }
    $options = $form['field_used_for_branches']['und']['#options'];
    if(count($bad_options) > 0){
      foreach ($options as $op => $option) {
        if(is_numeric($op) and in_array(intval($op), $bad_options)){
          unset($form['field_used_for_branches']['und']['#options'][$op]);
        }
      }
    }

  }
  if($form_id == "screen_menu_node_form"){
    $form['actions']['submit']['#submit'][] = 'texvox_screen_menu_form_submit_nested_handler';
  }

  // alter ivr form
  if($form_id == "ivr_node_form"){
    // dpm($form);
    $form['actions']['submit']['#submit'][] = 'texvox_ivr_form_submit_redirect_handler';
    if(isset($form['field_ivr_screen']['und']['entities'])){
      foreach ($form['field_ivr_screen']['und']['entities'] as $skey => $screen) {

        // hide original screen code
        if(isset($form['field_ivr_screen']['und']['entities'][$skey]['form']['field_original_screen_id'])){
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_original_screen_id']['#prefix'] = '<div style="display:none">';
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_original_screen_id']['#suffix'] = '</div>';
        }
        // branches connect
        if(is_numeric($skey) and isset($screen['form'])){
          $screen_id = intval($screen['#entity']->nid);
          $ivr_id = intval($form['nid']['#value']);
          $screen_code = $form['field_ivr_screen']['und']['entities'][$skey]['#entity']->title_field['und'][0]['value'];
          $options = $screen['form']['field_used_for_branches']['und']['#options'];
          $query = db_select('field_data_field_ivr_screen', 's');
          $query->join('field_data_field_used_for_branches', 'b', 'b.entity_id = s.field_ivr_screen_target_id');
          $query->join('node', 'n', 'n.nid = s.field_ivr_screen_target_id');

          $result = $query->fields('b', array('field_used_for_branches_target_id'))
                     ->condition('s.entity_id', intval($form['nid']['#value']), '=')
                     ->condition('b.entity_id', $screen_id, '<>')
                     ->condition('n.title', $screen_code, '=')
                     ->execute();
          $bad_options = array();
          foreach ($result as $row) {
            $bad_options[] = intval($row->field_used_for_branches_target_id);
          }

          $query = db_select('field_data_field_only_for_organization', 'ofo');
          $query->join('field_data_field_organization', 'o', 'ofo.field_only_for_organization_target_id = o.field_organization_target_id');

          $result = $query->fields('o', array('entity_id'))
                     ->condition('ofo.entity_id', intval($form['nid']['#value']), '=')
                     ->execute();
          $good_options = array();
          foreach ($result as $row) {
            $good_options[] = intval($row->entity_id);
          }
          if(count($good_options) > 0){
            foreach ($options as $op => $option) {
              if(is_numeric($op) and !in_array(intval($op), $good_options)){
                unset($form['field_ivr_screen']['und']['entities'][$skey]['form']['field_used_for_branches']['und']['#options'][$op]);
              }
            }
          }
          $options = $screen['form']['field_used_for_branches']['und']['#options'];
          if(count($bad_options) > 0){
            foreach ($options as $op => $option) {
              if(is_numeric($op) and in_array(intval($op), $bad_options)){
                unset($form['field_ivr_screen']['und']['entities'][$skey]['form']['field_used_for_branches']['und']['#options'][$op]);
              }
            }
          }
        }


        if(is_numeric($skey) and isset($screen['form']['field_menus']['und']['entities'])){
          foreach ($screen['form']['field_menus']['und']['entities'] as $mkey => $menu) {
            if(is_numeric($mkey) and isset($menu['form']['title_field'])){
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['title_field']['#prefix'] = '<div style="display:none">';
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['title_field']['#suffix'] = '</div>';
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][3] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][2];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][2] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][1];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][1] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][0];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][0] = "texvox_ivr_form_submit_menu_title_handler";
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['#element_validate'][] = "texvox_ivr_form_submit_menu_key_validator";

            }
          }
        }
        if(is_numeric($skey) and isset($screen['form']['field_new_verify_options']['und']['entities'])){
          foreach ($screen['form']['field_new_verify_options']['und']['entities'] as $mkey => $menu) {
            if(is_numeric($mkey) and isset($menu['form']['title_field'])){
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['title_field']['#prefix'] = '<div style="display:none">';
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['title_field']['#suffix'] = '</div>';
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][3] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][2];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][2] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][1];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][1] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][0];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['actions']['ief_edit_save']['#submit'][0] = "texvox_ivr_form_submit_menu_title_handler";
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['#element_validate'][] = "texvox_ivr_form_submit_menu_key_validator";
            }
          }
        }
        if (is_numeric($skey) and isset($screen['form']['field_menus']['und']['form']['title_field'])) {
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['title_field']['#prefix'] = '<div style="display:none">';
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['title_field']['#suffix'] = '</div>';
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['actions']['ief_add_save']['#submit'][3] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['actions']['ief_add_save']['#submit'][2];
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['actions']['ief_add_save']['#submit'][2] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['actions']['ief_add_save']['#submit'][1];
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['actions']['ief_add_save']['#submit'][1] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['actions']['ief_add_save']['#submit'][0];
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['actions']['ief_add_save']['#submit'][0] = "texvox_ivr_form_submit_menu_title_handler";
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['#element_validate'][] = "texvox_ivr_form_submit_menu_key_validator";
        }

        if (is_numeric($skey) and isset($screen['form']['field_new_verify_options']['und']['form']['title_field'])) {
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['title_field']['#prefix'] = '<div style="display:none">';
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['title_field']['#suffix'] = '</div>';
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['actions']['ief_add_save']['#submit'][3] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['actions']['ief_add_save']['#submit'][2];
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['actions']['ief_add_save']['#submit'][2] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['actions']['ief_add_save']['#submit'][1];
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['actions']['ief_add_save']['#submit'][1] = $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['actions']['ief_add_save']['#submit'][0];
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['actions']['ief_add_save']['#submit'][0] = "texvox_ivr_form_submit_menu_title_handler";
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['#element_validate'][] = "texvox_ivr_form_submit_menu_key_validator";
        }
      }
    }
    // dpm($form);
    if(!is_array($user->roles) || !in_array('administrator', $user->roles)){
      $form['revision_information']['#access'] = FALSE;
      $form['options']['#access'] = FALSE;
      $form['author']['#access'] = FALSE;
    }
    $current_screens = $form['field_ivr_screen']['und']['entities'];
    $current_screen_menu_options = array();
    $current_screen_menu_options['_none'] = "- None -";
    $real_options = array();
    $real_options['_none'] = "- None -";
    if(isset($form['nid']['#value']) and !empty($form['nid']['#value']) and intval($form['nid']['#value']) > 0){
      $action = 'edit';
      // fetch all screen code and nid in this IVR
      $query = db_select('field_data_field_ivr_screen', 's');
      $query->join('node', 'n', 'n.nid = s.field_ivr_screen_target_id');
      $result = $query->fields('n', array('nid', 'title'))
                 ->condition('s.entity_id', intval($form['nid']['#value']), '=')
                 ->execute();
      foreach ($result as $row) {
        $query = db_select('field_data_field_original_screen_id', 's');
        $result = $query->fields('s', array('field_original_screen_id_value'))
                        ->condition('s.entity_id', intval($row->nid), '=')
                        ->execute();
        $ori_id = 0;
        foreach ($result as $row) {
          $ori_id = intval($row->field_original_screen_id_value);
        }
        if($ori_id <= 0){
          $real_options[$row->nid] = $row->title . ' ('.$row->nid.')';
        }
      }
    }
    else{
      $action = 'new';
    }
    //get screen ids in this IVR
    foreach ($current_screens as $key => $screen) {
      if(is_numeric($key) and isset($screen['#entity']) and !empty($screen['#entity']) and isset($screen['#entity']->nid)){
        $index = intval($screen['#entity']->nid);
        $current_screen_menu_options[$index] = $screen['#entity']->title;
      }
    }
    $form['actions']['submit']['#submit'][] = 'texvox_ivr_form_submit_nested_handler';


    /*
      Screens options update
    */
    $screens_count = count($current_screen_menu_options) - 1;

    /**
     * Hide menus tab if the screen is not solid yet
     */
    if($action == "new"){
      if(isset($form['field_ivr_screen']['und']['form'])){
        $form['field_ivr_screen']['und']['form']['#fieldgroups']['group_menus']->format_type = 'hidden';
        $form['field_ivr_screen']['und']['form']['#fieldgroups']['group_variants']->format_type = 'hidden';
        foreach ($form['field_ivr_screen']['und']['form']['#group_children'] as $field => $group) {
          if ($group == 'group_menus' or $group == 'group_variants') {
            $form[$field]['#access'] = FALSE;
          }
        }
        $form['field_ivr_screen']['und']['form']['field_menus']['#access'] = FALSE;
        $form['field_ivr_screen']['und']['form']['field_variants']['#access'] = FALSE;
        $form['field_ivr_screen']['und']['form']['field_new_verify_options']['#access'] = FALSE;
        $real_menu_options = array();
        $real_menu_options['_none'] = "- None -";
        $form['field_ivr_screen']['und']['form']['field_verify_options']['und']['#options'] = $real_menu_options;
      }
      if(isset($form['field_ivr_screen']['und']['entities'])){
        foreach ($form['field_ivr_screen']['und']['entities'] as $key => $screen) {
          if(is_numeric($key) and isset($screen['form']) and isset($screen['#entity'])){
            $entity = $screen['#entity'];
            if(isset($entity->is_new) and $entity->is_new){
              $form['field_ivr_screen']['und']['entities'][$key]['form']['#fieldgroups']['group_menus']->format_type = 'hidden';
              $form['field_ivr_screen']['und']['entities'][$key]['form']['#fieldgroups']['group_variants']->format_type = 'hidden';
              foreach ($form['field_ivr_screen']['und']['entities'][$key]['form']['#group_children'] as $field => $group) {
                if ($group == 'group_menus' or $group == 'group_variants') {
                  $form[$field]['#access'] = FALSE;
                }
              }
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_menus']['#access'] = FALSE;
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['#access'] = FALSE;
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_new_verify_options']['#access'] = FALSE;
            }
            $real_menu_options = array();
            $real_menu_options['_none'] = "- None -";
            if(isset($form['field_ivr_screen']['und']['entities'][$key]['form'])){            
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_verify_options']['und']['#options'] = $real_menu_options;
            }
          }
        }
      }
    }
    else if($action == 'edit'){

      if(isset($form['field_ivr_screen']['und']['form'])){

        // connect branches
        $screen_id = 0;
        $query = db_select('field_data_field_only_for_organization', 'ofo');
        $query->join('field_data_field_organization', 'o', 'ofo.field_only_for_organization_target_id = o.field_organization_target_id');

        $result = $query->fields('o', array('entity_id'))
                   ->condition('ofo.entity_id', intval($form['nid']['#value']), '=')
                   ->execute();
        $good_options = array();
        foreach ($result as $row) {
          $good_options[] = intval($row->entity_id);
        }
        $options = $form['field_ivr_screen']['und']['form']['field_used_for_branches']['und']['#options'];
        if(count($good_options) > 0){
          foreach ($options as $op => $option) {
            if(is_numeric($op) and !in_array(intval($op), $good_options)){
              unset($form['field_ivr_screen']['und']['form']['field_used_for_branches']['und']['#options'][$op]);
            }
          }
        }
        

        $form['field_ivr_screen']['und']['form']['#fieldgroups']['group_menus']->format_type = 'hidden';
        $form['field_ivr_screen']['und']['form']['#fieldgroups']['group_variants']->format_type = 'hidden';
        foreach ($form['field_ivr_screen']['und']['form']['#group_children'] as $field => $group) {
          if ($group == 'group_menus' or $group == 'group_variants') {
            $form[$field]['#access'] = FALSE;
          }
        }
        $form['field_ivr_screen']['und']['form']['field_menus']['#access'] = FALSE;
        $form['field_ivr_screen']['und']['form']['field_variants']['#access'] = FALSE;
        $form['field_ivr_screen']['und']['form']['field_new_verify_options']['#access'] = FALSE;
        $real_menu_options = array();
        $real_menu_options['_none'] = "- None -";
        $form['field_ivr_screen']['und']['form']['field_verify_options']['und']['#options'] = $real_menu_options;
          
      }
      if(isset($form['field_ivr_screen']['und']['entities'])){
        foreach ($form['field_ivr_screen']['und']['entities'] as $key => $screen) {
          if(is_numeric($key) and isset($screen['form']) and isset($screen['#entity'])){
            $entity = $screen['#entity'];
            if(isset($entity->is_new) and $entity->is_new){
              if(isset($form['field_ivr_screen']['und']['entities'][$key]['form']['#fieldgroups'])){
                $form['field_ivr_screen']['und']['entities'][$key]['form']['#fieldgroups']['group_menus']->format_type = 'hidden';
                $form['field_ivr_screen']['und']['entities'][$key]['form']['#fieldgroups']['group_variants']->format_type = 'hidden';
                foreach ($form['field_ivr_screen']['und']['entities'][$key]['form']['#group_children'] as $field => $group) {
                  if ($group == 'group_menus' or $group == 'group_variants') {
                    $form[$field]['#access'] = FALSE;
                  }
                }
              }
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_menus']['#access'] = FALSE;
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['#access'] = FALSE;
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_new_verify_options']['#access'] = FALSE;
            }
            $real_menu_options = array();
            $real_menu_options['_none'] = "- None -";
            if(isset($entity->nid) and intval($entity->nid) > 0 and isset($form['field_ivr_screen']['und']['entities'][$key]['form'])){
              $screen_id = intval($entity->nid);
              $query = db_select('node', 'n');
              $query->join('field_data_field_menus', 'm', 'm.field_menus_target_id = n.nid');
              $query->join('field_data_field_action', 'a', 'a.entity_id = n.nid');
              $result = $query->fields('n', array('nid', 'title'))
                         ->condition('m.entity_id', $screen_id, '=')
                         ->condition('a.field_action_value', 4, '=')
                         ->execute();
              foreach ($result as $row) {
                $real_menu_options[$row->nid] = $row->title;
              }
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_verify_options']['und']['#options'] = $real_menu_options;

              // branches filter
              if(isset($form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['und']['entities'])){
                foreach ($form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['und']['entities'] as $svkey => $sv) {
                  if(is_numeric($svkey) and isset($sv['form'])){
                    if(isset($sv['form']['field_used_for_branches']['und']['#options'])){
                      $options = $form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['und']['entities'][$svkey]['form']['field_used_for_branches']['und']['#options'];
                      if(count($good_options) > 0){
                        foreach ($options as $op => $option) {
                          if(is_numeric($op) and !in_array(intval($op), $good_options)){
                            unset($form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['und']['entities'][$svkey]['form']['field_used_for_branches']['und']['#options'][$op]);
                          }
                        }
                      }
                    }

                    if(isset($sv['form']['field_used_for_branches']['field_variants'])){
                      $form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['und']['entities'][$svkey]['form']['field_variants']['#prefix'] = '<div style="display:none">';
                      $form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['und']['entities'][$svkey]['form']['field_variants']['#suffix'] = '</div>';
                    }
                    if(isset($sv['form']['field_used_for_branches']['field_original_screen_id'])){
                      $form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['und']['entities'][$svkey]['form']['field_original_screen_id']['#prefix'] = '<div style="display:none">';
                      $form['field_ivr_screen']['und']['entities'][$key]['form']['field_variants']['und']['entities'][$svkey]['form']['field_original_screen_id']['#suffix'] = '</div>';
                    }
                  }
                }
              }
              
            }
            
          }
          
        }
      }
    }

    /**
     * Change default options 
     */
    if($screens_count >= 0){
      //already has screens in this IVR
      $form['field_default_screen']['und']['#options'] = $real_options;
      $screens = $form['field_ivr_screen']['und']['entities'];
      foreach ($screens as $skey => $screen) {
        if(is_numeric($skey) and isset($screen['form']) and !empty($screen['form'])){
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_prelude_screen_code']['und']['#options'] = $real_options;
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_no_input_goto_screen']['und']['#options'] = $real_options;
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_input_goto_screen']['und']['#options'] = $real_options;
          // For menus as nodes

          if(isset($screen['form']['field_menus']) and isset($screen['form']['field_menus']['und'])){
            $menus = $screen['form']['field_menus'];
            if(isset($menus['und']['form'])){
              $menu_form = $menus['und']['form'];
              // create a new menu
              $options = $menu_form['field_go_to_screen']['und']['#options'];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['field_go_to_screen']['und']['#options'] = $real_options;
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
              unset($form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['field_action']['und']['#options'][4]);
            }
            if(isset($menus['und']['entities'])){
              // edit an exist menu
              foreach ($menus['und']['entities'] as $mkey => $deep_menu) {            
                if(is_numeric($mkey) and isset($deep_menu['form']) and !empty($deep_menu['form'])){
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'] = $real_options;
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#description'] = "* Please save IVR to see all the new screens created in this IVR";
                  unset($form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_action']['und']['#options'][4]);
                }
              }
            }
          }

          // for verify options
          if(isset($screen['form']['field_new_verify_options']) and isset($screen['form']['field_new_verify_options']['und'])){
            $menus = $screen['form']['field_new_verify_options'];
            if(isset($menus['und']['form'])){
              $menu_form = $menus['und']['form'];
              // create a new menu
              $options = $menu_form['field_go_to_screen']['und']['#options'];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['field_go_to_screen']['und']['#options'] = $real_options;
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
              unset($form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['field_action']['und']['#options'][4]);

            }
            if(isset($menus['und']['entities'])){
              // edit an exist menu
              foreach ($menus['und']['entities'] as $mkey => $deep_menu) {            
                if(is_numeric($mkey) and isset($deep_menu['form']) and !empty($deep_menu['form'])){
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'] = $real_options;
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#description'] = "* Please save IVR to see all the new screens created in this IVR";
                  unset($form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_action']['und']['#options'][4]);

                }
              }
            }
          }
        }
      }
    }
    if(true){
      $form['field_default_screen']['und']['#options'] = $real_options;
      if(isset($form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'])){
        $menus = $form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'];
        foreach ($menus as $mkey => $deep_menu) {
          if(is_numeric($mkey) and isset($form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'])){
            $form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'] = $real_options;
            $form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'][$mkey]['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
            unset($form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'][$mkey]['form']['field_action']['und']['#options'][4]);

          }
        }
      }
      if(isset($form['field_ivr_screen']['und']['form']['field_new_verify_options']['und']['entities'])){
        $menus = $form['field_ivr_screen']['und']['form']['field_new_verify_options']['und']['entities'];
        foreach ($menus as $mkey => $deep_menu) {
          if(is_numeric($mkey) and isset($form['field_ivr_screen']['und']['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'])){
            $form['field_ivr_screen']['und']['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'] = $real_options;
            $form['field_ivr_screen']['und']['form']['field_new_verify_options']['und']['entities'][$mkey]['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
            unset($form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_action']['und']['#options'][4]);

          }
        }
      }
    }
    if(isset($form['field_ivr_screen']['und']['form'])){
      //No screens in this IVR
      $form['field_ivr_screen']['und']['form']['field_original_screen_id']['#prefix'] = '<div style="display:none"';
      $form['field_ivr_screen']['und']['form']['field_original_screen_id']['#suffix'] = '</div>';
      $form['field_default_screen']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_prelude_screen_code']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_no_input_goto_screen']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_input_goto_screen']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_menus']['und']['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_menus']['und']['form']['field_go_to_screen']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_menus']['und']['form']['field_go_to_screen']['und']['#description'] = "* Please save IVR to see all the new screens created in this IVR";
      $form['field_ivr_screen']['und']['form']['field_new_verify_options']['und']['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_new_verify_options']['und']['form']['field_go_to_screen']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_new_verify_options']['und']['form']['field_go_to_screen']['und']['#description'] = "* Please save IVR to see all the new screens created in this IVR";
      unset($form['field_ivr_screen']['und']['form']['field_menus']['und']['form']['field_action']['und']['#options'][4]);

    }
    $form['field_default_screen']['und']['#description'] = "* Please save IVR to see all the new screens created in this IVR";
  }

}

function texvox_ivr_form_submit_menu_key_validator($element, &$form_state, &$form){
  // dpm($element);
  // dpm($form_state['values']);
  $flag = true;
  if (isset($element['field_menu_key_new']['und'][0]['value']['#value'])) {
    $val = $element['field_menu_key_new']['und'][0]['value']['#value'];
    if(strlen($val) > 1 and !is_numeric($val)){
      $flag = false;
    }
    elseif (strlen($val) == 1 and ($val != '*' and $val != '#' and !is_numeric($val))) {
      $flag = false;      
    }

    if (!$flag) {
      form_error($element['field_menu_key_new'], t('Invalid menu key'));
    }
  }
}
/*
 * redirect to edit page 
 */
function texvox_ivr_form_submit_redirect_handler($form, &$form_state){
  $nid = intval($form_state['values']['nid']);
  $form_state['redirect'] = 'node/' . $nid . '/edit';
}

/*
 * redirect to edit page 
 */
function texvox_organization_form_submit_redirect_handler($form, &$form_state){
  $nid = intval($form_state['values']['nid']);
  $form_state['redirect'] = 'node/' . $nid . '/edit';
}

/*
 * rewrite title
 */
function texvox_ivr_form_submit_menu_title_handler($form, &$form_state){
  if(isset($form_state['values']['field_ivr_screen']['und']['entities'])){
    foreach ($form_state['values']['field_ivr_screen']['und']['entities'] as $skey => $screen) {
      if(isset($screen['form']['field_menus']['und']['form']['field_menu_key_new']['und'][0]['value'])){
        $form_state['values']['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['title'] = $screen['form']['field_menus']['und']['form']['field_menu_key_new']['und'][0]['value']." ";
      }
    }
  }

}

/**
 * Link to IVR
 */
function texvox_screen_form_submit_link_to_ivr($form, &$form_state){
  $query = db_select('field_data_field_ivr_screen', 's');
  $result = $query->fields('s', array('entity_id'))
             ->condition('s.field_ivr_screen_target_id', intval($form_state['original_nid']), '=')
             ->execute();
  $ivrID = 0;
  foreach ($result as $row) {
    $ivrID = intval($row->entity_id);
  }
  if($ivrID > 0){
    $query = db_select('field_data_field_ivr_screen', 's');
    $query->addExpression('MAX(delta)', 'max_delta');
    $result = $query->condition('s.entity_id', $ivrID, '=')
             ->execute();
    $count = 0;
    foreach ($result as $row) {
      $count = intval($row->max_delta) + 1;
    }
  }

  if(intval($form_state['original_nid']) > 0){
    $query = db_select('field_data_field_variants', 's');
    $query->addExpression('MAX(delta)', 'max_delta');
    $result = $query->condition('s.entity_id', intval($form_state['original_nid']), '=')
             ->execute();
    $max_variant = 0;
    foreach ($result as $row) {
      $max_variant = intval($row->max_delta) + 1;
    }
  }

  $result = db_insert('field_data_field_ivr_screen') 
              ->fields(array(
                'entity_type' => 'node',
                'bundle' => 'ivr',
                'deleted' => 0,
                'entity_id' => $ivrID,
                'revision_id' => $ivrID,
                'language' => 'und',
                'delta' => $count,
                'field_ivr_screen_target_id' => intval($form_state['values']['nid']),
              ))
              ->execute();
  $result = db_insert('field_revision_field_ivr_screen') 
              ->fields(array(
                'entity_type' => 'node',
                'bundle' => 'ivr',
                'deleted' => 0,
                'entity_id' => $ivrID,
                'revision_id' => $ivrID,
                'language' => 'und',
                'delta' => $count,
                'field_ivr_screen_target_id' => intval($form_state['values']['nid']),
              ))
              ->execute();
  $result = db_insert('field_data_field_original_screen_id') // Table name no longer needs {}
              ->fields(array(
                'entity_type' => 'node',
                'bundle' => 'screen',
                'deleted' => 0,
                'entity_id' => intval($form_state['values']['nid']),
                'revision_id' => intval($form_state['values']['nid']),
                'language' => 'und',
                'delta' => 0,
                'field_original_screen_id_value' => intval($form_state['original_nid']),
              ))
              ->execute();
  $result = db_insert('field_revision_field_original_screen_id') // Table name no longer needs {}
              ->fields(array(
                'entity_type' => 'node',
                'bundle' => 'screen',
                'deleted' => 0,
                'entity_id' => intval($form_state['values']['nid']),
                'revision_id' => intval($form_state['values']['nid']),
                'language' => 'und',
                'delta' => 0,
                'field_original_screen_id_value' => intval($form_state['original_nid']),
              ))
              ->execute();
  $result = db_insert('field_data_field_variants') // Table name no longer needs {}
              ->fields(array(
                'entity_type' => 'node',
                'bundle' => 'screen',
                'deleted' => 0,
                'entity_id' => intval($form_state['original_nid']),
                'revision_id' => intval($form_state['original_nid']),
                'language' => 'und',
                'delta' => $max_variant,
                'field_variants_target_id' => intval($form_state['values']['nid']),
              ))
              ->execute();
  $result = db_insert('field_revision_field_variants') // Table name no longer needs {}
              ->fields(array(
                'entity_type' => 'node',
                'bundle' => 'screen',
                'deleted' => 0,
                'entity_id' => intval($form_state['original_nid']),
                'revision_id' => intval($form_state['original_nid']),
                'language' => 'und',
                'delta' => $max_variant,
                'field_variants_target_id' => intval($form_state['values']['nid']),
              ))
              ->execute();
  drupal_flush_all_caches();
}

/**
 * change updated timestamp for referenced organization
 */
function texvox_branch_form_submit_nested_handler($form, &$form_state){
  $timestamp = time();
  $org_id = intval($form['field_organization']['und']['#value']);
  $result = db_update('node') // Table name no longer needs {}
              ->fields(array(
                'changed' => $timestamp,
              ))
              ->condition('nid', $org_id, '=')
              ->execute();
  // update all the other branches of this org
  $sql = "UPDATE node as n 
          left join field_data_field_organization as o on o.entity_id = n.nid
          set n.changed = :updated
          where o.field_organization_target_id = :org_id";

  $args = array(':updated' => $timestamp, ':org_id' => $org_id);
  $result = db_query($sql, $args);
  $nid = intval($form_state['values']['nid']);
  $form_state['redirect'] = 'node/' . $nid . '/edit';
}


/**
 * change updated timestamp for referenced screens and menus
 */
function texvox_ivr_form_submit_nested_handler($form, &$form_state){
  $timestamp = time();
  $nid = intval($form_state['values']['nid']);  
  // screen level
  $sql_2 = "UPDATE field_data_field_ivr_screen as ss 
          left join node as update_screen on update_screen.nid = ss.field_ivr_screen_target_id
          set update_screen.changed = :updated
          where ss.entity_id = :nid";

  $args_2 = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql_2, $args_2);

  // menu level
  $sql_3 = "UPDATE field_data_field_ivr_screen as ss 
          left join field_data_field_menus as m on m.entity_id = ss.field_ivr_screen_target_id
          left join node as menu on menu.nid = m.field_menus_target_id
          set menu.changed = :updated
          where ss.entity_id = :nid";

  $args_3 = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql_3, $args_3);
}


/**
 * change updated timestamp for referenced ivr
 */
function texvox_screen_form_submit_nested_handler($form, &$form_state){
  $timestamp = time();
  $nid = intval($form_state['values']['nid']);
  $sql = "UPDATE node as n 
          left join field_data_field_ivr_screen as s on s.entity_id = n.nid
          set n.changed = :updated
          where s.field_ivr_screen_target_id = :nid";

  $args = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql, $args);

  // screen level
  $sql_2 = "UPDATE field_data_field_ivr_screen as s 
          left join node as ivr on s.entity_id = ivr.nid 
          left join field_data_field_ivr_screen as ss on ss.entity_id = ivr.nid
          left join node as update_screen on update_screen.nid = ss.field_ivr_screen_target_id
          set update_screen.changed = :updated
          where s.field_ivr_screen_target_id = :nid";

  $args_2 = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql_2, $args_2);

  // menu level
  $sql_3 = "UPDATE field_data_field_ivr_screen as s 
          left join node as ivr on s.entity_id = ivr.nid 
          left join field_data_field_ivr_screen as ss on ss.entity_id = ivr.nid
          left join field_data_field_menus as m on m.entity_id = ss.field_ivr_screen_target_id
          left join node as menu on menu.nid = m.field_menus_target_id
          set menu.changed = :updated
          where s.field_ivr_screen_target_id = :nid";

  $args_3 = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql_3, $args_3);
}

function texvox_timezone_validate(){
  return true;
}
/**
 * change updated timestamp for referenced branch
 */
function texvox_screen_menu_form_submit_nested_handler($form, &$form_state){
  $timestamp = time();
  $nid = intval($form_state['values']['nid']);  
  // Find IVR
  $query = db_select('field_data_field_ivr_screen', 's');
  $query->join('field_data_field_menus', 'm', 'm.entity_id = s.field_ivr_screen_target_id');
  $result = $query->fields('s', array('entity_id'))
             ->condition('m.field_menus_target_id', $nid, '=')
             ->execute();
  $ivrID = 0;
  foreach ($result as $row) {
    $ivrID = intval($row->entity_id);
  }
  if($ivrID > 0){
    // ivr level
    $result = db_update('node')
                ->fields(array(
                    'changed' => $timestamp,
                  ))
                ->condition('nid', $ivrID, '=')
                ->execute();
    // screen level
    $sql_2 = "UPDATE field_data_field_ivr_screen as ss 
            left join node as update_screen on update_screen.nid = ss.field_ivr_screen_target_id
            set update_screen.changed = :updated
            where ss.entity_id = :nid";

    $args_2 = array(':updated' => $timestamp, ':nid' => $ivrID);
    $result = db_query($sql_2, $args_2);

    // menu level
    $sql_3 = "UPDATE field_data_field_ivr_screen as ss 
            left join field_data_field_menus as m on m.entity_id = ss.field_ivr_screen_target_id
            left join node as menu on menu.nid = m.field_menus_target_id
            set menu.changed = :updated
            where ss.entity_id = :nid";

    $args_3 = array(':updated' => $timestamp, ':nid' => $ivrID);
    $result = db_query($sql_3, $args_3);
  }
}



/**
 * Implements hook_views_api().
 */
function texvox_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'texvox'),
  );
}

/**
 * Implementation of hook_views_query_alter
 * @param $view
 * @param $query
 */
function texvox_views_query_alter(&$view, &$query) {
  if ($view->name == 'new_content') {
    $url = request_uri();
    $temp = explode('/', $url);
    $timestamp = intval($temp[(count($temp)-1)]);
    $view->query->where[1]['conditions'][0]['field']="node.changed";
    $view->query->where[1]['conditions'][0]['value']=$timestamp;
    $view->query->where[1]['conditions'][0]['operator']=">=";    
  }
}

/**
 * Implementation of hook_rules_action_info
 * Use rule to delete related nodes
 */

function texvox_rules_action_info(){
  $items['texvox_delete_ivr_when_delete_branch'] = array(
    'label' => t('Delete all IVRs related to this branch'), 
    'parameter' => array(
      'node' => array(
        'type' => 'node',
        'label' => t('Node'),
      ),        
    ), 
    'group' => t('Texvox Delete Nodes Rules'),
    'callbacks' => array(
      'execute' => 'texvox_delete_ivr_when_delete_branch',
    ),
    'base' => 'texvox_delete_ivr_when_delete_branch',
  );
  $items['texvox_delete_branch_when_delete_organization'] = array(
    'label' => t('Delete all branches related to this organization'), 
    'parameter' => array(
      'node' => array(
        'type' => 'node',
        'label' => t('Node'),
      ),        
    ), 
    'group' => t('Texvox Delete Nodes Rules'),
    'callbacks' => array(
      'execute' => 'texvox_delete_branch_when_delete_organization',
    ),
    'base' => 'texvox_delete_branch_when_delete_organization',
  );
  $items['texvox_register_user_in_freeswitch'] = array(
    'label' => t('Register user in FreeSwitch'), 
    'parameter' => array(
      'user' => array(
        'type' => 'user',
        'label' => t('User'),
      ),        
    ), 
    'group' => t('Texvox User Management Rules'),
    'callbacks' => array(
      'execute' => 'texvox_register_user_in_freeswitch',
    ),
    'base' => 'texvox_register_user_in_freeswitch',
  );
  $items['texvox_delete_user_in_freeswitch'] = array(
    'label' => t('Delete user in FreeSwitch'), 
    'parameter' => array(
      'user' => array(
        'type' => 'user',
        'label' => t('User'),
      ),        
    ), 
    'group' => t('Texvox User Management Rules'),
    'callbacks' => array(
      'execute' => 'texvox_delete_user_in_freeswitch',
    ),
    'base' => 'texvox_delete_user_in_freeswitch',
  );
  $items['texvox_update_user_in_freeswitch'] = array(
    'label' => t('Update user in FreeSwitch'), 
    'parameter' => array(
      'user' => array(
        'type' => 'user',
        'label' => t('User'),
      ),        
    ), 
    'group' => t('Texvox User Management Rules'),
    'callbacks' => array(
      'execute' => 'texvox_update_user_in_freeswitch',
    ),
    'base' => 'texvox_update_user_in_freeswitch',
  );
  return $items;
}

/*
 * Update user in FreeSwitch
 */
function texvox_update_user_in_freeswitch($user){
  if(isset($user) and isset($user->roles) and is_array($user->roles) and count($user->roles) == 1){
    $uid = intval($user->uid);
    $name = $user->name;
    $domain = $user->field_domain;
    $domain_id = $domain['und'][0]['value'];

    
    // delete in  FS db
    $fs_database = array(
        'database' => 'freeswitch',
        'username' => 'admin', // assuming this is necessary
        'password' => 'djfhey^52yh%4tgh', // assuming this is necessary
        'host' => '66.228.48.166',//'70.32.106.160', // assumes localhost
        'driver' => 'mysql', // replace with your database driver
    );
    // replace 'freeswitch' with something that's unique to your module
    Database::addConnectionInfo('texvox_freeswitch_update', 'default', $fs_database);
    db_set_active('texvox_freeswitch_update');

    // execute queries here
    $user_updated = db_update('directory') 
                      ->fields(array(
                        'username' => $name,
                        'domain_id' => $domain_id,
                      ))
                      ->condition('id', $uid, '=');
    $rows = db_update('directory') 
                      ->fields(array(
                        'username' => $name,
                        'domain_id' => $domain_id,
                      ))
                      ->condition('id', $uid, '=')
                      ->execute();

    db_set_active(); // without the paramater means set back to the default for the site

    return 1;
  }
}


/*
 * Delete user in FreeSwitch
 */
function texvox_delete_user_in_freeswitch($user){
  if(isset($user) and isset($user->roles) and is_array($user->roles) and count($user->roles) == 1){

    $uid = intval($user->uid);
    // watchdog('USER delete', '<pre>'. print_r($uid, TRUE) .'</pre>');
    // delete in  FS db
    $fs_database = array(
        'database' => 'freeswitch',
        'username' => 'admin', // assuming this is necessary
        'password' => 'djfhey^52yh%4tgh', // assuming this is necessary
        'host' => '66.228.48.166',//'70.32.106.160', // assumes localhost
        'driver' => 'mysql', // replace with your database driver
    );
    // replace 'freeswitch' with something that's unique to your module
    Database::addConnectionInfo('texvox_freeswitch_delete', 'default', $fs_database);
    db_set_active('texvox_freeswitch_delete');

    // execute queries here
    
    try {
      $user_deleted = db_delete('directory')
      ->condition('id', $uid)
      ->execute();
      // watchdog('USER delete', '<pre>'. print_r($user_deleted, TRUE) .'</pre>');  
    } catch (PDOException $e) {
      // watchdog('USER delete', '<pre>'. print_r($e->getMessage(), TRUE) .'</pre>');  
    }
    $pass_deleted = db_delete('directory_params')
    ->condition('directory_id', $uid)
    ->execute();
    $number_deleted = db_delete('directory_vars')
    ->condition('directory_id', $uid)
    ->execute();

    db_set_active(); // without the paramater means set back to the default for the site
    return 1;
  }
}

/*
 * Register user in FreeSwitch
 */
function texvox_register_user_in_freeswitch($user){
  global $base_url;
  if(!(strpos($base_url, 'localhost') !== false) and !(strpos($base_url, '127.0.0.1') !== false)){

    if(isset($user) and isset($user->roles) and is_array($user->roles) and count($user->roles) == 1){
      watchdog('USER registered', '<pre>'. print_r($user, TRUE) .'</pre>');
      $uid = intval($user->uid);
      $name = $user->name;
      $mail = $user->mail;
      $domain_id = 1;
      if(isset($user->field_domain)){
        $domain = $user->field_domain;
        if(isset($domain['und'][0]['value']) and !empty($domain['und'][0]['value'])){    
          $domain_id = $domain['und'][0]['value'];
        }
      }

      $length = 10;
      $fs_pass = user_password($length); 
      $fs_pass_encrypted = encrypt($fs_pass);
      $encode_encrypt = utf8_encode($fs_pass_encrypted);
      

      // write the encrypted pass to Drupal db
      $result = db_insert('field_data_field_encrypted_freeswitch_pass') 
                ->fields(array(
                  'entity_type' => 'user',
                  'bundle' => 'user',
                  'deleted' => 0,
                  'entity_id' => $uid,
                  'revision_id' => $uid,
                  'language' => 'und',
                  'delta' => 0,
                  'field_encrypted_freeswitch_pass_value' => $encode_encrypt,
                  'field_encrypted_freeswitch_pass_format' => null
                ))
                ->execute();
      
      $result = db_insert('field_revision_field_encrypted_freeswitch_pass') 
                ->fields(array(
                  'entity_type' => 'user',
                  'bundle' => 'user',
                  'deleted' => 0,
                  'entity_id' => $uid,
                  'revision_id' => $uid,
                  'language' => 'und',
                  'delta' => 0,
                  'field_encrypted_freeswitch_pass_value' => $encode_encrypt,
                  'field_encrypted_freeswitch_pass_format' => null
                ))
                ->execute();
      

      // write username and pass generated to FS db
      $fs_database = array(
          'database' => 'freeswitch',
          'username' => 'admin', // assuming this is necessary
          'password' => 'djfhey^52yh%4tgh', // assuming this is necessary
          'host' => '66.228.48.166',//'70.32.106.160', // assumes localhost
          'driver' => 'mysql', // replace with your database driver
      );
      // replace 'freeswitch' with something that's unique to your module
      Database::addConnectionInfo('texvox_freeswitch', 'default', $fs_database);
      db_set_active('texvox_freeswitch');

      // execute queries here
      $directory_id = db_insert('directory') 
            ->fields(array(
              'id' => $uid,
              'username' => $name,
              'domain_id' => $domain_id
            ))
            ->execute();

      db_insert('directory_params') 
            ->fields(array(
              'directory_id' => $uid,
              'param_name' => "password",
              'param_value' => $fs_pass
            ))
            ->execute();


      db_set_active(); // without the paramater means set back to the default for the site
      return 1;
    }
  }
  return 1;
}

/*
 * DELETE ivrs when delete a branch
 */
function texvox_delete_ivr_when_delete_branch($node){

  // watchdog('Node Delete', '<pre>'. print_r($node, TRUE) .'</pre>');
  $nid = intval($node->nid);
  $and = db_and()->condition('entity_type', 'node')->condition('bundle', 'ivr')->condition('field_branch_target_id', $nid);
  
  $result = db_select('field_data_field_branch', 'n')
      ->fields('n', array('entity_id'))
      ->condition($and)
      ->execute();
  
  $node_id_array = array();
  foreach ($result as $row) {
    $ivrID = intval($row->entity_id);
    $node_id_array[] = $ivrID;
  }
  node_delete_multiple($node_id_array);
}

/*
 * DELETE branches when delete an organization
 */
function texvox_delete_branch_when_delete_organization($node){

  // watchdog('Node Delete', '<pre>'. print_r($node, TRUE) .'</pre>');
  $nid = intval($node->nid);
  $and = db_and()->condition('entity_type', 'node')->condition('bundle', 'branch')->condition('field_organization_target_id', $nid);
  
  $result = db_select('field_data_field_organization', 'n')
      ->fields('n', array('entity_id'))
      ->condition($and)
      ->execute();
  
  $node_id_array = array();
  foreach ($result as $row) {
    $ivrID = intval($row->entity_id);
    $node_id_array[] = $ivrID;
  }
  node_delete_multiple($node_id_array);
}

function texvox_convert_menu_title_to_key(){
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'screen_menu')
    ->execute()
    ->fetchCol(); // returns an indexed array

  $result = db_select('field_data_field_menu_key_new', 'm')
    ->fields('m', array('entity_id'))
    ->execute();
  foreach ($result as $row) {
    if(($key = array_search($row->entity_id, $nids)) !== false) {
      unset($nids[$key]);
    }
  }
  // Now return the node objects.
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $key => $node) {
    $node->field_menu_key_new['und'][0]['value'] = str_replace(" ", "", $node->title);
    // $node->title_field[$node->language][0]['value'] = $node->title;
    // $node->title = $node->title . " ";
    node_save($node);
    // dpm($node->nid);
  }
}

// hook_user_load
function texvox_user_load($users) {
  // watchdog("USER", "<pre>".print_r("HHHHH", true)."</pre>");
  foreach ($users as $record) {
     // foreach ($users as $record) {

     //    $result = db_query("SELECT fname FROM {users} WHERE uid IN ($record->uid)")->fetchAssoc(); 

     //    $users[$record->uid]->extra =$result['fname'];
     // }
    if(isset($record->field_encrypted_freeswitch_pass['und'][0]['value'])){
      $uid = intval($record->uid);
      $fs_database = array(
        'database' => 'freeswitch',
        'username' => 'admin', // assuming this is necessary
        'password' => 'djfhey^52yh%4tgh', // assuming this is necessary
        'host' => '66.228.48.166',//'70.32.106.160', // assumes localhost
        'driver' => 'mysql', // replace with your database driver
      );
      // replace 'freeswitch' with something that's unique to your module
      Database::addConnectionInfo('texvox_freeswitch', 'default', $fs_database);
      db_set_active('texvox_freeswitch');

      // execute queries here
      $password = '';
      $result = db_select('directory_params', 'n') 
            ->fields('n', array('param_value'))
            ->condition('n.directory_id', $uid)
            ->condition('n.param_name', "password")
            ->execute();

      foreach ($result as $row) {
        $password = $row->param_value;
      }
      
      db_set_active(); // without the paramater means set back to the default for the site
      $users[$record->uid]->field_encrypted_freeswitch_pass['und'][0]['value'] =$password;
      $users[$record->uid]->field_encrypted_freeswitch_pass['und'][0]['safe_value'] =$password;
    }
    // dpm($record);
  }

}

/*
 * Register API:
 * [POST] http://live-texvox.pantheon.io/api/user/register
 * {
 * "name":"usern",
 * "mail":"yang+n@aglobalway.com",
 * "pass":"admin",
 * "field_domain":{"und":{"0":{"value":1}}},
 * "field_first_name":{"und":{"0":{"value":"FIRST NAME"}}},
 * "field_last_name":{"und":{"0":{"value":"last NAME"}}},
 * "field_default_country":{"und":{"0":{"value":"Canada"}}},
 * "field_default_city":{"und":{"0":{"value":"Vancouver"}}}
 * }
 * NOTE: Need to login once it response without error message, Drupal has some issues for auto 
 * login after REST register
 *
 * Login API:
 * [POST] http://live-texvox.pantheon.io/api/user/login
 * {
 * "username":"username",
 * "password":"plainText" 
 * }
 * NOTE: App should keep the "token" and "user['uid']", and might need these to logout and reset 
 * password
 *
 * Forget password API:
 * [POST] http://live-texvox.pantheon.io/api/user/request_new_password
 * {
 * "name":"username"
 * }
 *
 * Update API:
 * [PUT] http://live-texvox.pantheon.io/auth-api/user/:id
 * - Headers:
 *    X-CSRF-Token:TokenReceived 
 * 
 * - Payload:
 *    {
 *    "pass":"newPassword",
 *    "current_pass":"oldPassword",
 *    "field_default_country":{"und":{"0":{"value":"Canada"}}},
 *    "field_default_city":{"und":{"0":{"value":"Vancouver"}}}
 *    }
 *
 * Logout API:
 * [POST] http://live-texvox.pantheon.io/auth-api/user/logout
 * - Headers:
 *    X-CSRF-Token:TokenReceived 
 *
 */

// branch{
//   holidays[
//     {
//       date: mm/dd/yyyy,
//       startTime: 9:00,
//       duration: 28800,   -- in seconds
//       IVR: 4             -- IVR Node ID
//     },
//     {
//       date: mm/dd/yyyy,
//       startTime: 17:00,
//       duration: 57600,   -- in seconds
//       IVR: 5             -- IVR Node ID
//     }
//   ]
// }



// yang+2@aglobalway.com
// admin
// z5IzuVpxpmoZRyS-8Zuosofl00zYVajtOK5hQPpzpDg

