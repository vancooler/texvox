<?php
if (defined('DEBUG')) {    
}
else {
    define('DEBUG', true);
}


//////////////////////////////////////////////////////////////////////
//
// Form alter to customize the user interface of content managemeng
//
//////////////////////////////////////////////////////////////////////
function texvox_form_alter(&$form, &$form_state, $form_id) {
  // Alter IVR only for this branch's organization
  if($form_id == "branch_node_form"){
    $nid = $form['nid']['#value'];
    $ivr_array = array("_none"=>"- Select a value -");
    if(isset($nid) and !empty($nid)){
      $query = db_select('field_data_field_only_for_organization', 'b');
      $query->join('field_data_field_organization', 'o', 'o.field_organization_target_id = b.field_only_for_organization_target_id');
      $query->join('node', 'n', 'n.nid = b.entity_id');
      $result = $query->fields('n', array('nid', 'title'))
                 ->condition('o.entity_id', $nid, '=')
                 ->orderBy("n.title", "ASC")
                 ->execute();
      // dpm($result);
      foreach ($result as $row) {
        $ivr_array[$row->nid] = $row->title;
      }
    }
    $timeslots = $form['field_timeslots']['und'];
    if(isset($timeslots) and !empty($timeslots)){
      foreach ($timeslots as $key => $timeslot) {
        if(is_numeric($key) and isset($timeslot['field_ivr']) and isset($timeslot['field_ivr']['und']) and isset($timeslot['field_ivr']['und']['#options'])){
          $form['field_timeslots']['und'][$key]['field_ivr']['und']['#options'] = $ivr_array;
        }
      }
    }
    $form['actions']['submit']['#submit'][] = 'texvox_branch_form_submit_nested_handler';
  }

  if($form_id == "screen_node_form"){
    $form['actions']['submit']['#submit'][] = 'texvox_screen_form_submit_nested_handler';
  }
  if($form_id == "screen_menu_node_form"){
    $form['actions']['submit']['#submit'][] = 'texvox_screen_menu_form_submit_nested_handler';
  }

  // alter ivr form
  if($form_id == "ivr_node_form"){
    $current_screens = $form['field_ivr_screen']['und']['entities'];
    $current_screen_menu_options = array();
    $current_screen_menu_options['_none'] = "- None -";
    $real_options = array();
    $real_options['_none'] = "- None -";
    if(isset($form['nid']['#value']) and !empty($form['nid']['#value']) and intval($form['nid']['#value']) > 0){
      $action = 'edit';
      // fetch all screen code and nid in this IVR
      $query = db_select('field_data_field_ivr_screen', 's');
      $query->join('node', 'n', 'n.nid = s.field_ivr_screen_target_id');
      $result = $query->fields('n', array('nid', 'title'))
                 ->condition('s.entity_id', intval($form['nid']['#value']), '=')
                 ->execute();
      foreach ($result as $row) {
        $real_options[$row->nid] = $row->title;
      }
    }
    else{
      $action = 'new';
    }
    //get screen ids in this IVR
    foreach ($current_screens as $key => $screen) {
      if(is_numeric($key) and isset($screen['#entity']) and !empty($screen['#entity'])){
        $index = intval($screen['#entity']->nid);
        $current_screen_menu_options[$index] = $screen['#entity']->title;
      }
    }
    $form['actions']['submit']['#submit'][] = 'texvox_ivr_form_submit_nested_handler';


    /*
      Screens options update
    */
    $screens_count = count($current_screen_menu_options) - 1;
    // dpm($form);

    /**
     * Hide menus tab if the screen is not solid yet
     */
    if($action == "new"){
      if(isset($form['field_ivr_screen']['und']['form'])){
        $form['field_ivr_screen']['und']['form']['#fieldgroups']['group_menus']->format_type = 'hidden';
        foreach ($form['field_ivr_screen']['und']['form']['#group_children'] as $field => $group) {
          if ($group == 'group_menus') {
            $form[$field]['#access'] = FALSE;
          }
        }
        $form['field_ivr_screen']['und']['form']['field_menus']['#access'] = FALSE;
      }
      if(isset($form['field_ivr_screen']['und']['entities'])){
        foreach ($form['field_ivr_screen']['und']['entities'] as $key => $screen) {
          if(is_numeric($key) and isset($screen['form']) and isset($screen['#entity'])){
            $entity = $screen['#entity'];
            if(isset($entity->is_new) and $entity->is_new){
              $form['field_ivr_screen']['und']['entities'][$key]['form']['#fieldgroups']['group_menus']->format_type = 'hidden';
              foreach ($form['field_ivr_screen']['und']['entities'][$key]['form']['#group_children'] as $field => $group) {
                if ($group == 'group_menus') {
                  $form[$field]['#access'] = FALSE;
                }
              }
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_menus']['#access'] = FALSE;
            }
          }
          // if(is_numeric($key) and isset($screen['#entity'])){
          //   $entity = $screen['#entity'];
          //   if(isset($entity->is_new) and $entity->is_new){
          //     $tmp_entity = $entity;
          //     $tmp_entity->status = 0;
          //     $form['field_ivr_screen']['und']['entities'][$key]['#entity'] = $tmp_entity;
          //   }
          // }
        }
      }
    }
    else if($action == 'edit'){
      if(isset($form['field_ivr_screen']['und']['form'])){
        $form['field_ivr_screen']['und']['form']['#fieldgroups']['group_menus']->format_type = 'hidden';
        foreach ($form['field_ivr_screen']['und']['form']['#group_children'] as $field => $group) {
          if ($group == 'group_menus') {
            $form[$field]['#access'] = FALSE;
          }
        }
        $form['field_ivr_screen']['und']['form']['field_menus']['#access'] = FALSE;
      }
      if(isset($form['field_ivr_screen']['und']['entities'])){
        foreach ($form['field_ivr_screen']['und']['entities'] as $key => $screen) {
          if(is_numeric($key) and isset($screen['form']) and isset($screen['#entity'])){
            $entity = $screen['#entity'];
            if(isset($entity->is_new) and $entity->is_new){

              $form['field_ivr_screen']['und']['entities'][$key]['form']['#fieldgroups']['group_menus']->format_type = 'hidden';
              foreach ($form['field_ivr_screen']['und']['entities'][$key]['form']['#group_children'] as $field => $group) {
                if ($group == 'group_menus') {
                  $form[$field]['#access'] = FALSE;
                }
              }
              $form['field_ivr_screen']['und']['entities'][$key]['form']['field_menus']['#access'] = FALSE;
            }
          }
          // if(is_numeric($key) and isset($screen['#entity'])){
          //   $entity = $screen['#entity'];
          //   if(isset($entity->is_new) and $entity->is_new){
          //     $tmp_entity = $entity;
          //     $tmp_entity->status = 0;
          //     $form['field_ivr_screen']['und']['entities'][$key]['#entity'] = $tmp_entity;
          //   }
          // }
        }
      }
    }

    /**
     * Change default options 
     */
    if($screens_count > 0){
      //already has screens in this IVR
      $form['field_default_screen']['und']['#options'] = $real_options;
      $screens = $form['field_ivr_screen']['und']['entities'];
      foreach ($screens as $skey => $screen) {
        if(is_numeric($skey) and isset($screen['form']) and !empty($screen['form'])){
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_prelude_screen_code']['und']['#options'] = $real_options;
          $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_no_input_goto_screen']['und']['#options'] = $real_options;
          // For menus as nodes
          $menus = $screen['form']['field_menus'];
          if(isset($menus) and isset($menus['und'])){
            $menu_form = $menus['und']['form'];
            if(isset($menu_form)){
              // create a new menu
              $options = $menu_form['field_go_to_screen']['und']['#options'];
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['field_go_to_screen']['und']['#options'] = $real_options;
              $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
            }
            else{
              // edit an exist menu
              foreach ($menus['und']['entities'] as $mkey => $deep_menu) {            
                if(is_numeric($mkey) and isset($deep_menu['form']) and !empty($deep_menu['form'])){
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'] = $real_options;
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
                  $form['field_ivr_screen']['und']['entities'][$skey]['form']['field_menus']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#description'] = "* Please save IVR to see all the new screens created in this IVR";
                }
              }
            }
          }
        }
      }
    }
    else{
      $form['field_default_screen']['und']['#options'] = $real_options;
      if(isset($form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'])){
        $menus = $form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'];
        foreach ($menus as $mkey => $deep_menu) {
          if(is_numeric($mkey) and isset($form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'])){
            $form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'][$mkey]['form']['field_go_to_screen']['und']['#options'] = $real_options;
            $form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'][$mkey]['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
          }
        }
      }
    }
    if(isset($form['field_ivr_screen']['und']['form'])){
      //No screens in this IVR
      $form['field_ivr_screen']['und']['form']['field_menus']['und']['form']['field_go_to_screen']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_menus']['und']['form']['field_go_to_screen']['und']['#description'] = "* Please save IVR to see all the new screens created in this IVR";
      $form['field_default_screen']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_prelude_screen_code']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_no_input_goto_screen']['und']['#options'] = $real_options;
      $form['field_ivr_screen']['und']['form']['field_menus']['und']['form']['field_action_delay_screen_code']['und']['#options'] = $real_options;
      // $menus = $form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'];
      // foreach ($menus as $dmkey => $menu) {
      //   unset($form['field_ivr_screen']['und']['form']['field_menus']['und']['entities'][$dmkey]);
      // }
    }
    $form['field_default_screen']['und']['#description'] = "* Please save IVR to see all the new screens created in this IVR";
  }

}


/*
 * redirect to edit page to add screens
 */
function texvox_ivr_form_submit_redirect_handler($form, &$form_state){
  $nid = intval($form_state['values']['nid']);
  $form_state['redirect'] = 'node/' . $nid . '/edit';
}

/**
 * change updated timestamp for referenced organization
 */
function texvox_branch_form_submit_nested_handler($form, &$form_state){
  $timestamp = time();
  $org_id = intval($form['field_organization']['und']['#value']);
  $result = db_update('node') // Table name no longer needs {}
              ->fields(array(
                'changed' => $timestamp,
              ))
              ->condition('nid', $org_id, '=')
              ->execute();
  // update all the other branches of this org
  $sql = "UPDATE node as n 
          left join field_data_field_organization as o on o.entity_id = n.nid
          set n.changed = :updated
          where o.field_organization_target_id = :org_id";

  $args = array(':updated' => $timestamp, ':org_id' => $org_id);
  $result = db_query($sql, $args);
}


/**
 * change updated timestamp for referenced screens and menus
 */
function texvox_ivr_form_submit_nested_handler($form, &$form_state){
  $timestamp = time();
  $nid = intval($form_state['values']['nid']);  
  // screen level
  $sql_2 = "UPDATE field_data_field_ivr_screen as ss 
          left join node as update_screen on update_screen.nid = ss.field_ivr_screen_target_id
          set update_screen.changed = :updated
          where ss.entity_id = :nid";

  $args_2 = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql_2, $args_2);

  // menu level
  $sql_3 = "UPDATE field_data_field_ivr_screen as ss 
          left join field_data_field_menus as m on m.entity_id = ss.field_ivr_screen_target_id
          left join node as menu on menu.nid = m.field_menus_target_id
          set menu.changed = :updated
          where ss.entity_id = :nid";

  $args_3 = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql_3, $args_3);
}


/**
 * change updated timestamp for referenced ivr
 */
function texvox_screen_form_submit_nested_handler($form, &$form_state){
  $timestamp = time();
  $nid = intval($form_state['values']['nid']);
  $sql = "UPDATE node as n 
          left join field_data_field_ivr_screen as s on s.entity_id = n.nid
          set n.changed = :updated
          where s.field_ivr_screen_target_id = :nid";

  $args = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql, $args);

  // screen level
  $sql_2 = "UPDATE field_data_field_ivr_screen as s 
          left join node as ivr on s.entity_id = ivr.nid 
          left join field_data_field_ivr_screen as ss on ss.entity_id = ivr.nid
          left join node as update_screen on update_screen.nid = ss.field_ivr_screen_target_id
          set update_screen.changed = :updated
          where s.field_ivr_screen_target_id = :nid";

  $args_2 = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql_2, $args_2);

  // menu level
  $sql_3 = "UPDATE field_data_field_ivr_screen as s 
          left join node as ivr on s.entity_id = ivr.nid 
          left join field_data_field_ivr_screen as ss on ss.entity_id = ivr.nid
          left join field_data_field_menus as m on m.entity_id = ss.field_ivr_screen_target_id
          left join node as menu on menu.nid = m.field_menus_target_id
          set menu.changed = :updated
          where s.field_ivr_screen_target_id = :nid";

  $args_3 = array(':updated' => $timestamp, ':nid' => $nid);
  $result = db_query($sql_3, $args_3);
}


/**
 * change updated timestamp for referenced branch
 */
function texvox_screen_menu_form_submit_nested_handler($form, &$form_state){
  $timestamp = time();
  $nid = intval($form_state['values']['nid']);  
  // Find IVR
  $query = db_select('field_data_field_ivr_screen', 's');
  $query->join('field_data_field_menus', 'm', 'm.entity_id = s.field_ivr_screen_target_id');
  $result = $query->fields('s', array('entity_id'))
             ->condition('m.field_menus_target_id', $nid, '=')
             ->execute();
  $ivrID = 0;
  foreach ($result as $row) {
    $ivrID = intval($row->entity_id);
  }
  if($ivrID > 0){
    // ivr level
    $result = db_update('node')
                ->fields(array(
                    'changed' => $timestamp,
                  ))
                ->condition('nid', $ivrID, '=')
                ->execute();
    // screen level
    $sql_2 = "UPDATE field_data_field_ivr_screen as ss 
            left join node as update_screen on update_screen.nid = ss.field_ivr_screen_target_id
            set update_screen.changed = :updated
            where ss.entity_id = :nid";

    $args_2 = array(':updated' => $timestamp, ':nid' => $ivrID);
    $result = db_query($sql_2, $args_2);

    // menu level
    $sql_3 = "UPDATE field_data_field_ivr_screen as ss 
            left join field_data_field_menus as m on m.entity_id = ss.field_ivr_screen_target_id
            left join node as menu on menu.nid = m.field_menus_target_id
            set menu.changed = :updated
            where ss.entity_id = :nid";

    $args_3 = array(':updated' => $timestamp, ':nid' => $ivrID);
    $result = db_query($sql_3, $args_3);
  }
}



/**
 * Implements hook_views_api().
 */
function texvox_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'texvox'),
  );
}

/**
 * Implementation of hook_views_query_alter
 * @param $view
 * @param $query
 */
function texvox_views_query_alter(&$view, &$query) {
  if ($view->name == 'new_content') {
    $url = request_uri();
    $temp = explode('/', $url);
    $timestamp = intval($temp[(count($temp)-1)]);
    $view->query->where[1]['conditions'][0]['field']="node.changed";
    $view->query->where[1]['conditions'][0]['value']=$timestamp;
    $view->query->where[1]['conditions'][0]['operator']=">=";    
  }
}

/**
 * Implementation of hook_rules_action_info
 * Use rule to delete related nodes
 */

function texvox_rules_action_info(){
  $items['texvox_delete_ivr_when_delete_branch'] = array(
    'label' => t('Delete all IVRs related to this branch'), 
    'parameter' => array(
      'node' => array(
        'type' => 'node',
        'label' => t('Node'),
      ),        
    ), 
    'group' => t('Texvox Delete Nodes Rules'),
    'callbacks' => array(
      'execute' => 'texvox_delete_ivr_when_delete_branch',
    ),
    'base' => 'texvox_delete_ivr_when_delete_branch',
  );
  $items['texvox_delete_branch_when_delete_organization'] = array(
    'label' => t('Delete all branches related to this organization'), 
    'parameter' => array(
      'node' => array(
        'type' => 'node',
        'label' => t('Node'),
      ),        
    ), 
    'group' => t('Texvox Delete Nodes Rules'),
    'callbacks' => array(
      'execute' => 'texvox_delete_branch_when_delete_organization',
    ),
    'base' => 'texvox_delete_branch_when_delete_organization',
  );
  return $items;
}

/*
 * DELETE ivrs when delete a branch
 */
function texvox_delete_ivr_when_delete_branch($node){

  // watchdog('Node Delete', '<pre>'. print_r($node, TRUE) .'</pre>');
  $nid = intval($node->nid);
  $and = db_and()->condition('entity_type', 'node')->condition('bundle', 'ivr')->condition('field_branch_target_id', $nid);
  
  $result = db_select('field_data_field_branch', 'n')
      ->fields('n', array('entity_id'))
      ->condition($and)
      ->execute();
  
  $node_id_array = array();
  foreach ($result as $row) {
    $ivrID = intval($row->entity_id);
    $node_id_array[] = $ivrID;
  }
  node_delete_multiple($node_id_array);
}

/*
 * DELETE branches when delete an organization
 */
function texvox_delete_branch_when_delete_organization($node){

  // watchdog('Node Delete', '<pre>'. print_r($node, TRUE) .'</pre>');
  $nid = intval($node->nid);
  $and = db_and()->condition('entity_type', 'node')->condition('bundle', 'branch')->condition('field_organization_target_id', $nid);
  
  $result = db_select('field_data_field_organization', 'n')
      ->fields('n', array('entity_id'))
      ->condition($and)
      ->execute();
  
  $node_id_array = array();
  foreach ($result as $row) {
    $ivrID = intval($row->entity_id);
    $node_id_array[] = $ivrID;
  }
  node_delete_multiple($node_id_array);
}

/*
 * Register API:
 * [POST] http://live-texvox.pantheon.io/api/user/register
 * {
 * "name":"username",
 * "mail":"emailAddress",
 * "pass":"plainText"
 * }
 * NOTE: Need to login once it response without error message, Drupal has some issues for auto 
 * login after REST register
 *
 * Login API:
 * [POST] http://live-texvox.pantheon.io/api/user/login
 * {
 * "username":"username",
 * "password":"plainText" 
 * }
 * NOTE: App should keep the "token" and "user['uid']", and might need these to logout and reset 
 * password
 *
 * Forget password API:
 * [POST] http://live-texvox.pantheon.io/api/user/request_new_password
 * {
 * "name":"username"
 * }
 *
 * Reset Password API:
 * [PUT] http://live-texvox.pantheon.io/auth-api/user/:id
 * - Headers:
 *    X-CSRF-Token:TokenReceived 
 * 
 * - Payload:
 *    {
 *    "pass":"newPassword",
 *    "current_pass":"oldPassword"
 *    }
 *
 * Logout API:
 * [POST] http://live-texvox.pantheon.io/auth-api/user/logout
 * - Headers:
 *    X-CSRF-Token:TokenReceived 
 *
 */


